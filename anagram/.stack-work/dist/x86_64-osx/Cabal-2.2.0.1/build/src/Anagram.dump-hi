
==================== FINAL INTERFACE ====================
2018-12-31 03:02:19.009578 UTC

interface anagram-1.4.0.8-9be11hOJmVdKnWxiXDlbFp:Anagram 8043
  interface hash: 35b6799f04492def0c2d5d16f4ac3331
  ABI hash: ca77d39ca66d18558c2cf722f471057c
  export-list hash: 29386fdd3918b9f095aca13227163ce7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8f52f5e5828eb5661f405d8d9ca450ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Anagram.anagramsFor
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
12f1e015446cb759fb8cf1a5c5ec0e86
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Anagram.$trModule3
                   Anagram.$trModule1) -}
9de18890749a48d46370971bb5083006
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Anagram.$trModule2) -}
ea22ed898c696e0416978542cb5392c3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Anagram"#) -}
24d6b81df1478afdfc0efc41f5dec1ef
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Anagram.$trModule4) -}
47ba8de86d7bbad51376a1e3451937c0
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("anagram-1.4.0.8-9be11hOJmVdKnWxiXDlbFp"#) -}
99d61d48d6db4457fcdbd3712f0deb5f
  anagramsFor ::
    GHC.Base.String -> [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 2, Strictness: <L,1*U><S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String)
                   (eta :: [[GHC.Types.Char]]) ->
                 let {
                   lvl :: [GHC.Types.Char]
                   = GHC.Base.map
                       @ GHC.Types.Char
                       @ GHC.Types.Char
                       GHC.Unicode.toLower
                       xs
                 } in
                 let {
                   lvl1 :: [GHC.Types.Char]
                   = Data.OldList.sortBy
                       @ GHC.Types.Char
                       GHC.Classes.$fOrdChar_$ccompare
                       lvl
                 } in
                 GHC.List.filter
                   @ [GHC.Types.Char]
                   (\ (x :: [GHC.Types.Char]) ->
                    case GHC.Classes.$fEqModule_$s$c==
                           (GHC.Base.map
                              @ GHC.Types.Char
                              @ GHC.Types.Char
                              GHC.Unicode.toLower
                              x)
                           lvl of wild {
                      GHC.Types.False
                      -> GHC.Base.eqString
                           (Data.OldList.sortBy
                              @ GHC.Types.Char
                              GHC.Classes.$fOrdChar_$ccompare
                              (GHC.Base.map
                                 @ GHC.Types.Char
                                 @ GHC.Types.Char
                                 GHC.Unicode.toLower
                                 x))
                           lvl1
                      GHC.Types.True -> GHC.Types.False })
                   eta) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

