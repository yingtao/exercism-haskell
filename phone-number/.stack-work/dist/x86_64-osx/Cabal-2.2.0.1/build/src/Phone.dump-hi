
==================== FINAL INTERFACE ====================
2019-01-02 00:06:57.710411 UTC

interface phone-number-1.6.1.8-E4pB7M6VV0D5aP02kEQM3Y:Phone 8043
  interface hash: 37cc9bb3163952be618f3b7f4759d35c
  ABI hash: 9a66b4baac80148cedb108ab56996de7
  export-list hash: 8839f4d108cb04b22c7440289834d02f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8f52f5e5828eb5661f405d8d9ca450ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Phone.number
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
aad6e66d94ccc2420b3c1e6b71f0bcaf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Phone.$trModule3 Phone.$trModule1) -}
cf6c696193369bba2e961a68cdf36fb1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Phone.$trModule2) -}
100d85847ac7bf309d67c8325f4de00d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Phone"#) -}
91368277554e39d9417972f3d0b4f2e4
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Phone.$trModule4) -}
44ba81d93d50dd7d990ca6d21ef4b4cc
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("phone-number-1.6.1.8-E4pB7M6VV0D5aP02kEQM3Y"#) -}
f89ada418c7cead0095e073a8660b3a0
  checkNumber :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 case GHC.List.$w!!
                        @ GHC.Types.Char
                        xs
                        0# of wild { GHC.Types.C# c1 ->
                 case GHC.Prim.ltChar# c1 '2'# of lwild {
                   DEFAULT
                   -> case GHC.List.$w!!
                             @ GHC.Types.Char
                             xs
                             3# of wild1 { GHC.Types.C# c2 ->
                      case GHC.Prim.ltChar# c2 '2'# of lwild1 {
                        DEFAULT -> GHC.Base.Just @ GHC.Base.String xs
                        1# -> GHC.Base.Nothing @ GHC.Base.String } }
                   1# -> GHC.Base.Nothing @ GHC.Base.String } }) -}
dc88ee7ccd54286a99aa2abe171a53ec
  number :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 let {
                   numberOnly :: [GHC.Types.Char]
                   = GHC.List.filter @ GHC.Types.Char GHC.Unicode.isDigit xs
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char numberOnly 0# of ww2 {
                   DEFAULT
                   -> case GHC.Prim.<# ww2 10# of lwild {
                        DEFAULT
                        -> case GHC.Prim.># ww2 11# of lwild1 {
                             DEFAULT
                             -> case numberOnly of wild {
                                  []
                                  -> case GHC.List.badHead
                                     ret_ty (GHC.Base.Maybe GHC.Base.String)
                                     of {}
                                  : x ds1
                                  -> case x of wild1 { GHC.Types.C# x1 ->
                                     case x1 of wild2 {
                                       DEFAULT -> GHC.Base.Nothing @ GHC.Base.String
                                       '1'# -> Phone.checkNumber ds1 } } }
                             1# -> GHC.Base.Nothing @ GHC.Base.String }
                        1# -> GHC.Base.Nothing @ GHC.Base.String }
                   10# -> Phone.checkNumber numberOnly }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

