
==================== FINAL INTERFACE ====================
2019-01-02 03:12:25.45918 UTC

interface secret-handshake-1.2.0.6-3Lb8CjlKjqiJlehrXUwzaK:SecretHandshake 8043
  interface hash: a6876aaf10f0fc3dd97577175783182a
  ABI hash: 22c9088a4123a9b6722f8b1caa460d3f
  export-list hash: b39cddbb4e0293549bbe02809b132bbd
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8f52f5e5828eb5661f405d8d9ca450ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  SecretHandshake.handshake
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Bits bbb4ac3d5246b98befe8bd31900b1c2f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
e049c130096fbb83b6edb90cda1d6477
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SecretHandshake.$trModule3
                   SecretHandshake.$trModule1) -}
3b65874ccf45d2cabf4788beb0da94cc
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SecretHandshake.$trModule2) -}
87f90d022e0b108404e255d7fba29ca9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SecretHandshake"#) -}
5f3a914e87a5986329363ac30bc2bff7
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SecretHandshake.$trModule4) -}
da51a3e18891973d4333a6b12670d979
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("secret-handshake-1.2.0.6-3Lb8CjlKjqiJlehrXUwzaK"#) -}
13eb5452f84ad22faeaddc4e2a11bcd6
  $whandshake :: GHC.Prim.Int# -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   n :: [[GHC.Types.Char]]
                   = case GHC.Prim.andI# ww 4# of wild {
                       DEFAULT
                       -> GHC.Types.:
                            @ [GHC.Types.Char]
                            SecretHandshake.handshake8
                            (case GHC.Prim.andI# ww 8# of wild1 {
                               DEFAULT -> SecretHandshake.handshake5
                               0# -> GHC.Types.[] @ [GHC.Types.Char] })
                       0#
                       -> case GHC.Prim.andI# ww 8# of wild1 {
                            DEFAULT -> SecretHandshake.handshake5
                            0# -> GHC.Types.[] @ [GHC.Types.Char] } }
                 } in
                 case GHC.Prim.andI# ww 1# of wild {
                   DEFAULT
                   -> case GHC.Prim.andI# ww 16# of wild1 {
                        DEFAULT
                        -> GHC.List.reverse1
                             @ [GHC.Types.Char]
                             (GHC.Types.:
                                @ [GHC.Types.Char]
                                SecretHandshake.handshake3
                                (case GHC.Prim.andI# ww 2# of wild2 {
                                   DEFAULT
                                   -> GHC.Types.: @ [GHC.Types.Char] SecretHandshake.handshake1 n
                                   0# -> n }))
                             (GHC.Types.[] @ [GHC.Types.Char])
                        0#
                        -> GHC.Types.:
                             @ [GHC.Types.Char]
                             SecretHandshake.handshake3
                             (case GHC.Prim.andI# ww 2# of wild2 {
                                DEFAULT
                                -> GHC.Types.: @ [GHC.Types.Char] SecretHandshake.handshake1 n
                                0# -> n }) }
                   0#
                   -> case GHC.Prim.andI# ww 2# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.andI# ww 16# of wild2 {
                             DEFAULT
                             -> GHC.List.reverse1
                                  @ [GHC.Types.Char]
                                  (GHC.Types.: @ [GHC.Types.Char] SecretHandshake.handshake1 n)
                                  (GHC.Types.[] @ [GHC.Types.Char])
                             0# -> GHC.Types.: @ [GHC.Types.Char] SecretHandshake.handshake1 n }
                        0#
                        -> case GHC.Prim.andI# ww 16# of wild2 {
                             DEFAULT -> GHC.List.reverse @ [GHC.Types.Char] n 0# -> n } } }) -}
d4f1180882233e5227ee6f81bf1278ec
  handshake :: GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 SecretHandshake.$whandshake ww1 }) -}
c3b710fcd1ab01a88ed45b087e04c6e6
  handshake1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SecretHandshake.handshake2) -}
a88b34277a5406020217827e11f34de9
  handshake2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("double blink"#) -}
099c8b68827d64d7146e601d6a28dfe6
  handshake3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SecretHandshake.handshake4) -}
fa977cead4f8a39aec8d61f225dbad86
  handshake4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("wink"#) -}
56cf6c076252034a632b08082aa146fe
  handshake5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   SecretHandshake.handshake6
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
baa3a41797cbd675ba55ec4bd50d5f1e
  handshake6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SecretHandshake.handshake7) -}
d7b44c65f198b01069a17985b5c7f0ae
  handshake7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("jump"#) -}
be0ed530846437629529d1bbfbd3b78d
  handshake8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   SecretHandshake.handshake9) -}
b7c235b72646bd4d2b04b2673abec140
  handshake9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("close your eyes"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

